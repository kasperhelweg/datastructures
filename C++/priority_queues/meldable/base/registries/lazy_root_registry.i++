namespace KHJ  {
  namespace thesis  {
    namespace root_registry  {
      /**
       * Constructor.
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N, typename M, typename S>
      lazy_root_registry<N, M, S>::lazy_root_registry( ) : size_( 0 ), 
                                                           cons_( 0 ), 
                                                           top_( nullptr ), 
                                                           root_list_( S( ) ) 
      { }

      /**
       * DeConstructor.
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N, typename M, typename S>
      lazy_root_registry<N, M, S>::~lazy_root_registry( ) 
      { }
      
      /**
       * top( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N, typename M, typename S>
      N* lazy_root_registry<N, M, S>::top( ) const
      { 
        return top_; 
      }

      /**
       * size( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N, typename M, typename S>
      int lazy_root_registry<N, M, S>::size( ) const
      { 
        return size_; 
      }

      template<typename N, typename M, typename S>
      bool lazy_root_registry<N, M, S>::empty( ) const
      { 
        return size_ == 0; 
      }

      
      /**
       * insert( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N, typename M, typename S>
      void lazy_root_registry<N, M, S>::inject( N* Q )
      { 
        if( top_ == nullptr || 
            M::compare_( (*Q).element(), (*top_).element() ) ) { 
          top_ = Q; 
        }
        root_list_.inject( Q );
        cons_ = 1; ++size_;
      }

      /**
       * extract( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N, typename M, typename S>
      N* lazy_root_registry<N, M, S>::eject( )
      { 
        N* B = nullptr;
        if( !root_list_.empty( ) ) {
          B = root_list_.eject( );
          if( (*B).height( ) != 0 ) {
            N** st = M::split( B );
            root_list_.inject( st[0] ); root_list_.inject( st[1] );
            delete[] st;
          }
          --size_;
        }
        return B;    
      }
       
      /**
       * consolidate( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N, typename M, typename S>
      void lazy_root_registry<N, M, S>::consolidate( )
      { 
        if( cons_ ) {
          int i = 0, u = 0, c = 1;
          
          /*
          std::vector<int> h = std::vector<int>( );
            
          for( auto it = root_list_.begin( ) ; it != root_list_.end( ) ; it++ ) {
            u = (*(*it)).height( );
            if( h.size( ) < u + 1 ) {
              while( h.size( ) <= u + 1 )
                h.push_back( 0 );
            }
            h[u] += 1;
            if (h[u] > 2) {
              c = 1; break;
            }
          }
          */
          
          if( c ) {
            int s = floor( log2( size_ + 1 ) ); u = 0; i = 0;
            std::vector<N*> A[s];
            while( !root_list_.empty( )) {
              N* Q  = root_list_.eject( );
              i = (*Q).height( );
              A[i].push_back( std::move( Q ) );
            } 
            while( 1 ) {
              while( !A[i].empty( ) && A[i].size( ) > 2  ) {
                N* P = A[i].back( ); A[i].pop_back( );
                N* R = A[i].back( ); A[i].pop_back( );
                N* T = A[i].back( ); A[i].pop_back( );
                N* t[3] = { P, R, T };   
                swap_nodes_( t, 0, M::compare_( 
                  (*t[1]).element(), (*t[0]).element() ) );
                swap_nodes_( t, 2, M::compare_( 
                  (*t[0]).element(), (*t[2]).element() ) );
                if( i == 0 ) {
                  M::join_heaps( t[0], t[1], t[2]  );
                  A[1].push_back( t[0] );
                } else {
                  N** st = M::split( t[0] );
                  M::join_heaps( t[0], t[1], t[2]  );
                  A[i+1].push_back( t[0] );
                  A[i-1].push_back( st[0] );
                  A[i-1].push_back( st[1] );
                  delete[] st;
                  if( A[i-1].size( ) > 2 ) 
                    u = 1;
                }
              }
              if( u ) {
                i = i - 1; u = 0;
              } else if( i == s - 1 )
                break; 
              else
                i = i + 1;
            }
            for( i = s-1 ; i >= 0; i--) { 
              for( auto it = A[i].begin( ); it != A[i].end( ); ++it) 
                root_list_.inject( *it );
              A[i].clear( );
            }
          } cons_ = 0;
        }
      }

      /**
       * update_top( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N, typename M, typename S>
      void lazy_root_registry<N, M, S>::update_top( )
      {
        top_ = nullptr;
        for( auto it = root_list_.begin( ) ; it != root_list_.end( ) ; it++ ) {        
          if( top_ == nullptr || 
              M::compare_( (*(*it)).element(),  (*top_).element() ) )  {          
            top_ = *it;
          }
        }
      }

      /**
       * update_top( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N, typename M, typename S>
      void lazy_root_registry<N, M, S>::update_top( N* Q )
      {
        top_ = Q;
      }
       
      template<typename N, typename M, typename S>
      void lazy_root_registry<N, M, S>::print( ) const
      {
        std::cout << "queue size: " << size_ << std::endl;     
        root_list_.print( );
        if( top_ != nullptr ) {
          std::cout << "top: " << (*top_).element( ) << std::endl;
        }
        std::cout << std::endl;     
      }

      // swap aux
      template <typename N, typename M, typename S>
      void lazy_root_registry<N, M, S>::swap_nodes_ (N* nodes[], int i1, int i2) 
      {
        N* temp   = nodes[i1];
        nodes[i1] = nodes[i2];
        nodes[i2] = temp;
      }
    }
  }
}

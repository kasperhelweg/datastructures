%!PS-Adobe-2.0 EPSF-2.0
%%Title: ./figures/seq_b_po.ps
%%Creator: gnuplot 4.6 patchlevel 5
%%CreationDate: Sun Jun  8 19:35:32 2014
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color true def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/SuppressPDFMark false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
/BackgroundColor {-1.000 -1.000 -1.000} def
%
/vshift -46 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 410 50 lineto 410 302 lineto 50 302 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.6 (September 2012)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
  clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
Level1 SuppressPDFMark or 
{} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (./figures/seq_b_po.ps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.6 patchlevel 5)
  /Author (kasper)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Sun Jun  8 19:35:32 2014)
  /DOCINFO pdfmark
end
} ifelse
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
doclip
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 140 scalefont setfont
BackgroundColor 0 lt 3 1 roll 0 lt exch 0 lt or or not {BackgroundColor C 1.000 0 0 7200.00 5040.00 BoxColFill} if
1.000 UL
LTb
LCb setrgbcolor
602 448 M
63 0 V
6282 0 R
-63 0 V
518 448 M
( 0) Rshow
1.000 UL
LTb
LCb setrgbcolor
602 890 M
63 0 V
6282 0 R
-63 0 V
518 890 M
( 1) Rshow
1.000 UL
LTb
LCb setrgbcolor
602 1333 M
63 0 V
6282 0 R
-63 0 V
-6366 0 R
( 2) Rshow
1.000 UL
LTb
LCb setrgbcolor
602 1775 M
63 0 V
6282 0 R
-63 0 V
-6366 0 R
( 3) Rshow
1.000 UL
LTb
LCb setrgbcolor
602 2217 M
63 0 V
6282 0 R
-63 0 V
-6366 0 R
( 4) Rshow
1.000 UL
LTb
LCb setrgbcolor
602 2660 M
63 0 V
6282 0 R
-63 0 V
-6366 0 R
( 5) Rshow
1.000 UL
LTb
LCb setrgbcolor
602 3102 M
63 0 V
6282 0 R
-63 0 V
-6366 0 R
( 6) Rshow
1.000 UL
LTb
LCb setrgbcolor
602 3544 M
63 0 V
6282 0 R
-63 0 V
-6366 0 R
( 7) Rshow
1.000 UL
LTb
LCb setrgbcolor
602 3986 M
63 0 V
6282 0 R
-63 0 V
-6366 0 R
( 8) Rshow
1.000 UL
LTb
LCb setrgbcolor
602 4429 M
63 0 V
6282 0 R
-63 0 V
-6366 0 R
( 9) Rshow
1.000 UL
LTb
LCb setrgbcolor
602 4871 M
63 0 V
6282 0 R
-63 0 V
-6366 0 R
( 10) Rshow
1.000 UL
LTb
LCb setrgbcolor
602 448 M
0 63 V
0 4360 R
0 -63 V
602 308 M
( 1000) Cshow
1.000 UL
LTb
LCb setrgbcolor
1080 448 M
0 31 V
0 4392 R
0 -31 V
1711 448 M
0 31 V
0 4392 R
0 -31 V
2035 448 M
0 31 V
0 4392 R
0 -31 V
2188 448 M
0 63 V
0 4360 R
0 -63 V
0 -4500 R
( 10000) Cshow
1.000 UL
LTb
LCb setrgbcolor
2666 448 M
0 31 V
0 4392 R
0 -31 V
3297 448 M
0 31 V
0 4392 R
0 -31 V
3621 448 M
0 31 V
0 4392 R
0 -31 V
3775 448 M
0 63 V
0 4360 R
0 -63 V
0 -4500 R
( 100000) Cshow
1.000 UL
LTb
LCb setrgbcolor
4252 448 M
0 31 V
0 4392 R
0 -31 V
4883 448 M
0 31 V
0 4392 R
0 -31 V
5207 448 M
0 31 V
0 4392 R
0 -31 V
5361 448 M
0 63 V
0 4360 R
0 -63 V
0 -4500 R
( 1e+06) Cshow
1.000 UL
LTb
LCb setrgbcolor
5838 448 M
0 31 V
0 4392 R
0 -31 V
6469 448 M
0 31 V
0 4392 R
0 -31 V
6793 448 M
0 31 V
0 4392 R
0 -31 V
6947 448 M
0 63 V
0 4360 R
0 -63 V
0 -4500 R
( 1e+07) Cshow
1.000 UL
LTb
LCb setrgbcolor
1.000 UL
LTb
LCb setrgbcolor
602 4871 N
602 448 L
6345 0 V
0 4423 V
-6345 0 V
Z stroke
LCb setrgbcolor
112 2659 M
currentpoint gsave translate -270 rotate 0 0 M
(time in micro-seconds per. element) Cshow
grestore
LTb
LCb setrgbcolor
3774 98 M
(number of elements\( log-scale \)) Cshow
LTb
0.700 UP
1.000 UL
LTb
LCb setrgbcolor
% Begin plot #1
0.700 UP
1.000 UL
LT0
0.00 0.50 0.00 C LCb setrgbcolor
2366 4738 M
(Regular Binary Queue) Rshow
LT0
0.00 0.50 0.00 C 2450 4738 M
380 0 V
602 841 M
279 16 V
280 24 V
279 27 V
279 31 V
280 26 V
279 34 V
279 36 V
279 35 V
280 50 V
279 123 V
279 138 V
280 410 V
279 244 V
279 144 V
280 128 V
279 331 V
279 224 V
280 170 V
279 414 V
279 340 V
280 358 V
279 364 V
602 841 Box
881 857 Box
1161 881 Box
1440 908 Box
1719 939 Box
1999 965 Box
2278 999 Box
2557 1035 Box
2836 1070 Box
3116 1120 Box
3395 1243 Box
3674 1381 Box
3954 1791 Box
4233 2035 Box
4512 2179 Box
4792 2307 Box
5071 2638 Box
5350 2862 Box
5630 3032 Box
5909 3446 Box
6188 3786 Box
6468 4144 Box
6747 4508 Box
2640 4738 Box
% End plot #1
% Begin plot #2
0.700 UP
1.000 UL
LT1
0.50 0.50 0.00 C LCb setrgbcolor
2366 4598 M
(Lazy Binary Queue) Rshow
LT1
0.50 0.50 0.00 C 2450 4598 M
380 0 V
602 1308 M
279 -33 V
280 -72 V
279 -47 V
279 -86 V
280 -64 V
279 38 V
279 39 V
279 53 V
280 50 V
279 103 V
279 139 V
280 356 V
279 229 V
279 292 V
280 158 V
279 233 V
279 228 V
280 185 V
279 363 V
279 268 V
280 359 V
279 403 V
602 1308 TriUF
881 1275 TriUF
1161 1203 TriUF
1440 1156 TriUF
1719 1070 TriUF
1999 1006 TriUF
2278 1044 TriUF
2557 1083 TriUF
2836 1136 TriUF
3116 1186 TriUF
3395 1289 TriUF
3674 1428 TriUF
3954 1784 TriUF
4233 2013 TriUF
4512 2305 TriUF
4792 2463 TriUF
5071 2696 TriUF
5350 2924 TriUF
5630 3109 TriUF
5909 3472 TriUF
6188 3740 TriUF
6468 4099 TriUF
6747 4502 TriUF
2640 4598 TriUF
% End plot #2
% Begin plot #3
0.700 UP
1.000 UL
LT2
0.54 0.17 0.89 C LCb setrgbcolor
2366 4458 M
(Eager Binary Queue) Rshow
LT2
0.54 0.17 0.89 C 2450 4458 M
380 0 V
602 911 M
279 31 V
280 26 V
279 23 V
279 27 V
280 32 V
279 41 V
279 34 V
279 40 V
280 52 V
279 115 V
279 93 V
280 131 V
279 151 V
279 139 V
280 470 V
279 289 V
279 209 V
280 240 V
279 332 V
279 293 V
280 343 V
279 397 V
602 911 CircleF
881 942 CircleF
1161 968 CircleF
1440 991 CircleF
1719 1018 CircleF
1999 1050 CircleF
2278 1091 CircleF
2557 1125 CircleF
2836 1165 CircleF
3116 1217 CircleF
3395 1332 CircleF
3674 1425 CircleF
3954 1556 CircleF
4233 1707 CircleF
4512 1846 CircleF
4792 2316 CircleF
5071 2605 CircleF
5350 2814 CircleF
5630 3054 CircleF
5909 3386 CircleF
6188 3679 CircleF
6468 4022 CircleF
6747 4419 CircleF
2640 4458 CircleF
% End plot #3
% Begin plot #4
0.700 UP
1.000 UL
LT3
0.00 0.55 0.55 C LCb setrgbcolor
2366 4318 M
(Boost Binomial Queue) Rshow
LT3
0.00 0.55 0.55 C 2450 4318 M
380 0 V
602 1043 M
279 17 V
280 35 V
279 39 V
279 31 V
280 39 V
279 30 V
279 41 V
279 5 V
280 53 V
279 125 V
279 105 V
280 120 V
279 129 V
279 163 V
280 115 V
279 185 V
279 269 V
280 192 V
279 189 V
279 203 V
280 264 V
279 507 V
602 1043 Circle
881 1060 Circle
1161 1095 Circle
1440 1134 Circle
1719 1165 Circle
1999 1204 Circle
2278 1234 Circle
2557 1275 Circle
2836 1280 Circle
3116 1333 Circle
3395 1458 Circle
3674 1563 Circle
3954 1683 Circle
4233 1812 Circle
4512 1975 Circle
4792 2090 Circle
5071 2275 Circle
5350 2544 Circle
5630 2736 Circle
5909 2925 Circle
6188 3128 Circle
6468 3392 Circle
6747 3899 Circle
2640 4318 Circle
% End plot #4
% Begin plot #5
0.700 UP
1.000 UL
LT4
0.85 0.65 0.13 C LCb setrgbcolor
2366 4178 M
(Boost Fibonacci Heap) Rshow
LT4
0.85 0.65 0.13 C 2450 4178 M
380 0 V
602 673 M
279 7 V
280 15 V
279 7 V
279 13 V
280 8 V
279 9 V
279 7 V
279 11 V
280 63 V
279 56 V
279 54 V
280 28 V
279 21 V
279 34 V
280 15 V
279 69 V
279 91 V
280 28 V
279 67 V
279 37 V
280 89 V
279 77 V
602 673 BoxF
881 680 BoxF
1161 695 BoxF
1440 702 BoxF
1719 715 BoxF
1999 723 BoxF
2278 732 BoxF
2557 739 BoxF
2836 750 BoxF
3116 813 BoxF
3395 869 BoxF
3674 923 BoxF
3954 951 BoxF
4233 972 BoxF
4512 1006 BoxF
4792 1021 BoxF
5071 1090 BoxF
5350 1181 BoxF
5630 1209 BoxF
5909 1276 BoxF
6188 1313 BoxF
6468 1402 BoxF
6747 1479 BoxF
2640 4178 BoxF
% End plot #5
1.000 UL
LTb
LCb setrgbcolor
602 4871 N
602 448 L
6345 0 V
0 4423 V
-6345 0 V
Z stroke
0.700 UP
1.000 UL
LTb
LCb setrgbcolor
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
